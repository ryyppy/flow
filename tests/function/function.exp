apply.js:2
  2:   return this.length; // expect []/"" this
                   ^^^^^^ property `length`. Property not found in
  2:   return this.length; // expect []/"" this
              ^^^^ Number

apply.js:12
 12: test.apply("", [""]); // error: string ~> number
     ^^^^^^^^^^^^^^^^^^^^ call of method `apply`
 12: test.apply("", [""]); // error: string ~> number
                     ^^ string. This type is incompatible with
  1: function test(a: string, b: number): number {
                                 ^^^^^^ number

apply.js:15
 15: test.apply("", ["", ""]); // error: string ~> number (2nd arg)
                         ^^ string. This type is incompatible with the expected param type of
  1: function test(a: string, b: number): number {
                                 ^^^^^^ number

apply.js:16
 16: test.apply("", [0, 0]); // error: number ~> string (1st arg)
                     ^ number. This type is incompatible with the expected param type of
  1: function test(a: string, b: number): number {
                      ^^^^^^ string

apply.js:21
 21: f(["", ""]); // error: string ~> number (2nd arg)
            ^^ string. This type is incompatible with the expected param type of
  1: function test(a: string, b: number): number {
                                 ^^^^^^ number

apply.js:22
 22: f([0, 0]); // error: number ~> string (1st arg)
        ^ number. This type is incompatible with the expected param type of
  1: function test(a: string, b: number): number {
                      ^^^^^^ string

apply.js:25
 25: test.apply("", "not array"); // error: expect array of args
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call of method `apply`. Expected array of arguments instead of
 25: test.apply("", "not array"); // error: expect array of args
                    ^^^^^^^^^^^ string

apply.js:32
 32: (test.call.apply(test, [0, 123, 'foo']): void);
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ number. This type is incompatible with
 32: (test.call.apply(test, [0, 123, 'foo']): void);
                                              ^^^^ undefined

apply.js:32
 32: (test.call.apply(test, [0, 123, 'foo']): void);
                                ^^^ number. This type is incompatible with the expected param type of
  1: function test(a: string, b: number): number {
                      ^^^^^^ string

apply.js:32
 32: (test.call.apply(test, [0, 123, 'foo']): void);
                                     ^^^^^ string. This type is incompatible with the expected param type of
  1: function test(a: string, b: number): number {
                                 ^^^^^^ number

apply.js:37
 37: (test.bind.apply(test, [0, 123]): (b: number) => number);
                                ^^^ number. This type is incompatible with the expected param type of
  1: function test(a: string, b: number): number {
                      ^^^^^^ string

bind.js:7
  7:     y(123); // error, number !~> string
           ^^^ number. This type is incompatible with the expected param type of
  4:   function(x: (a: string, b: string) => void) {
                                  ^^^^^^ string

call.js:4
  4:   return this.length; // expect []/"" this
                   ^^^^^^ property `length`. Property not found in
  4:   return this.length; // expect []/"" this
              ^^^^ Number

call.js:14
 14: test.call("", ""); // error: string ~> number
     ^^^^^^^^^^^^^^^^^ call of method `call`
 14: test.call("", ""); // error: string ~> number
     ^^^^^^^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
  3: function test(a: string, b: number): number {
                                 ^^^^^^ number

call.js:17
 17: test.call("", "", ""); // error: string ~> number (2nd arg)
                       ^^ string. This type is incompatible with the expected param type of
  3: function test(a: string, b: number): number {
                                 ^^^^^^ number

call.js:18
 18: test.call("", 0, 0); // error: number ~> string (1st arg)
                   ^ number. This type is incompatible with the expected param type of
  3: function test(a: string, b: number): number {
                      ^^^^^^ string

call.js:21
 21: function f(args) { test.call("", args[0], args[1]) }
                                      ^^^^^^^ number. This type is incompatible with the expected param type of
  3: function test(a: string, b: number): number {
                      ^^^^^^ string

call.js:21
 21: function f(args) { test.call("", args[0], args[1]) }
                                               ^^^^^^^ string. This type is incompatible with the expected param type of
  3: function test(a: string, b: number): number {
                                 ^^^^^^ number

call.js:30
 30: (test.apply.call(test, 0, [0, 'foo']): number);
                                ^ number. This type is incompatible with the expected param type of
  3: function test(a: string, b: number): number {
                      ^^^^^^ string

call.js:30
 30: (test.apply.call(test, 0, [0, 'foo']): number);
                                   ^^^^^ string. This type is incompatible with the expected param type of
  3: function test(a: string, b: number): number {
                                 ^^^^^^ number

function.js:29
 29:   var a: number = x; // Error
                       ^ function type. This type is incompatible with
 29:   var a: number = x; // Error
              ^^^^^^ number

function.js:30
 30:   var b: string = x; // Error
                       ^ function type. This type is incompatible with
 30:   var b: string = x; // Error
              ^^^^^^ string

function.js:31
 31:   var c: Function = y; // Object is not a Function
                         ^ object type. This type is incompatible with
 31:   var c: Function = y; // Object is not a Function
              ^^^^^^^^ function type

function.js:37
 37:     (x.length: void); // error, it's a number
          ^^^^^^^^ number. This type is incompatible with
 37:     (x.length: void); // error, it's a number
                    ^^^^ undefined

function.js:38
 38:     (y.length: void); // error, it's a number
          ^^^^^^^^ number. This type is incompatible with
 38:     (y.length: void); // error, it's a number
                    ^^^^ undefined

function.js:39
 39:     (z.length: void); // error, it's a number
          ^^^^^^^^ number. This type is incompatible with
 39:     (z.length: void); // error, it's a number
                    ^^^^ undefined

function.js:41
 41:     (x.name: void); // error, it's a string
          ^^^^^^ string. This type is incompatible with
 41:     (x.name: void); // error, it's a string
                  ^^^^ undefined

function.js:42
 42:     (y.name: void); // error, it's a string
          ^^^^^^ string. This type is incompatible with
 42:     (y.name: void); // error, it's a string
                  ^^^^ undefined

function.js:43
 43:     (z.name: void); // error, it's a string
          ^^^^^^ string. This type is incompatible with
 43:     (z.name: void); // error, it's a string
                  ^^^^ undefined

function.js:48
 48:     x.length = 'foo'; // error, it's a number
                    ^^^^^ string. This type is incompatible with
102:     length: number;
                 ^^^^^^ number. See lib: <BUILTINS>/core.js:102

function.js:49
 49:     y.length = 'foo'; // error, it's a number
         ^^^^^^^^ assignment of property `length`
 49:     y.length = 'foo'; // error, it's a number
                    ^^^^^ string. This type is incompatible with
102:     length: number;
                 ^^^^^^ number. See lib: <BUILTINS>/core.js:102

function.js:50
 50:     z.length = 'foo'; // error, it's a number
         ^^^^^^^^ assignment of property `length`
 50:     z.length = 'foo'; // error, it's a number
                    ^^^^^ string. This type is incompatible with
102:     length: number;
                 ^^^^^^ number. See lib: <BUILTINS>/core.js:102

function.js:52
 52:     x.name = 123; // error, it's a string
                  ^^^ number. This type is incompatible with
103:     name: string;
               ^^^^^^ string. See lib: <BUILTINS>/core.js:103

function.js:53
 53:     y.name = 123; // error, it's a string
         ^^^^^^ assignment of property `name`
 53:     y.name = 123; // error, it's a string
                  ^^^ number. This type is incompatible with
103:     name: string;
               ^^^^^^ string. See lib: <BUILTINS>/core.js:103

function.js:54
 54:     z.name = 123; // error, it's a string
         ^^^^^^ assignment of property `name`
 54:     z.name = 123; // error, it's a string
                  ^^^ number. This type is incompatible with
103:     name: string;
               ^^^^^^ string. See lib: <BUILTINS>/core.js:103

rest.js:8
  8: function rest_tuple<T>(...xs: [T]): T {
                                   ^^^ tuple type. rest parameter should have an explicit array type (or type `any`)

rest.js:17
 17: function rest_t<U, T: Array<U>>(...xs: T): U {
                                            ^ T. rest parameter should have an explicit array type (or type `any`)


Found 37 errors
