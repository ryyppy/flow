A.js:13
 13: var bad: number = Bad.foo();
                       ^^^^^^^^^ string. This type is incompatible with
 13: var bad: number = Bad.foo();
              ^^^^^^ number

A.js:21
 21: var good: number = Good.foo();
                        ^^^^^^^^^^ string. This type is incompatible with
 21: var good: number = Good.foo();
               ^^^^^^ number

B.js:7
  7: var good: number = A.Good.foo();
                        ^^^^^^^^^^^^ string. This type is incompatible with
  7: var good: number = A.Good.foo();
               ^^^^^^ number

B.js:10
 10: var bad_: number = f(); // Calling the function is fine
                        ^^^ function call. This function call's `this` type is incompatible with
 13: var bad: number = Bad.foo();
                       ^^^ object literal. See: A.js:13
  The call's `this` type is:
  global object

B.js:10
 10: var bad_: number = f(); // Calling the function is fine
                        ^^^ string. This type is incompatible with
 10: var bad_: number = f(); // Calling the function is fine
               ^^^^^^ number

B.js:12
 12: var bad: number = A.Bad.foo(); // Method call is not fine
                       ^^^^^^^^^^^ string. This type is incompatible with
 12: var bad: number = A.Bad.foo(); // Method call is not fine
              ^^^^^^ number

non_objects.js:3
  3: Object.assign("123", {a: "foo"});
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ property `a` of object literal. Property cannot be assigned on
  3: Object.assign("123", {a: "foo"});
                   ^^^^^ string

non_objects.js:4
  4: Object.assign(123, {a: "foo"});
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ property `a` of object literal. Property cannot be assigned on
  4: Object.assign(123, {a: "foo"});
                   ^^^ number

non_objects.js:5
  5: Object.assign({a: "foo"}, 123);
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call of method `assign`. Expected object instead of
  5: Object.assign({a: "foo"}, 123);
                               ^^^ number


Found 9 errors
