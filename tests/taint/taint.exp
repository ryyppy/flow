adder.js:14
 14:   var z : number = x + y;
                        ^^^^^ taint. This type is incompatible with
 14:   var z : number = x + y;
               ^^^^^^ number

adder.js:18
 18:   var z : number = x + y;
                        ^^^^^ taint. This type is incompatible with
 18:   var z : number = x + y;
               ^^^^^^ number

adder.js:22
 22:   var z : string = x + y;
                        ^^^^^ number. This type is incompatible with
 22:   var z : string = x + y;
               ^^^^^^ string

adder.js:22
 22:   var z : string = x + y;
                        ^^^^^ taint. This type is incompatible with
 22:   var z : string = x + y;
               ^^^^^^ string

adder.js:26
 26:   var z : string = x + y;
                        ^^^^^ taint. This type is incompatible with
 26:   var z : string = x + y;
               ^^^^^^ string

adder.js:30
 30:   var z : string = x + y;
                        ^^^^^ taint. This type is incompatible with
 30:   var z : string = x + y;
               ^^^^^^ string

any_object.js:7
  7:     obj.foo = x; // error, taint ~> any
                   ^ taint. This type is incompatible with
  7:     obj.foo = x; // error, taint ~> any
         ^^^^^^^ any

any_object.js:8
  8:     obj[y] = x; // error, taint ~> any
                  ^ taint. This type is incompatible with
  8:     obj[y] = x; // error, taint ~> any
         ^^^^^^ any

any_object.js:20
 20:     obj.foo(x); // error, taint ~> any
                 ^ taint. This type is incompatible with
 20:     obj.foo(x); // error, taint ~> any
         ^^^^^^^^^^ any

any_object.js:23
 23:     foo(x); // error, taint ~> any
             ^ taint. This type is incompatible with
 23:     foo(x); // error, taint ~> any
         ^^^ any

call-object-property.js:5
  5:   o.f(x);
           ^ taint. This type is incompatible with
  5:   o.f(x);
       ^^^^^^ any

call-object-property.js:11
 11:   o1.f(o2.t);
            ^^^^ taint. This type is incompatible with
 11:   o1.f(o2.t);
       ^^^^^^^^^^ any

call-object-property.js:18
 18:   f(x);
         ^ taint. This type is incompatible with
 18:   f(x);
       ^ any

call-object-property.js:21
 21:   f1(o.t);
          ^^^ taint. This type is incompatible with
 21:   f1(o.t);
       ^^ any

call-object-property.js:24
 24:   (f1(o1))(o2.t);
                ^^^^ taint. This type is incompatible with
 24:   (f1(o1))(o2.t);
        ^^^^^^ any

comparator.js:4
  4:   var z : $Tainted<bool> = x < y;
                                    ^ number. This type cannot be compared to
  4:   var z : $Tainted<bool> = x < y;
                                ^ string

comparator.js:8
  8:   var z : $Tainted<bool> = x < y;
                                    ^ number. This type cannot be compared to
  8:   var z : $Tainted<bool> = x < y;
                                ^ string

comparator.js:12
 12:   var z : $Tainted<bool> = x < y;
                                ^ string. This type cannot be compared to
 12:   var z : $Tainted<bool> = x < y;
                                    ^ number

function.js:6
  6:     x(y); // error, taint ~> any
           ^ taint. This type is incompatible with
  6:     x(y); // error, taint ~> any
         ^ any

function.js:12
 12:     z(y);
           ^ taint. This type is incompatible with
 12:     z(y);
         ^ any

globals.js:5
  5:     fakeDocument.location = x; // error
         ^^^^^^^^^^^^^^^^^^^^^ assignment of property `location`
  5:     fakeDocument.location = x; // error
                                 ^ taint. This type is incompatible with
  6:   location: FakeLocation;
                 ^^^^^^^^^^^^ FakeLocation. See lib: lib.js:6

taint2.js:8
  8:     fakeDocument.location.assign(tainted);
                                      ^^^^^^^ taint. This type is incompatible with the expected param type of
  2:   assign(url: string): void;
                   ^^^^^^ string. See lib: lib.js:2

taint3.js:10
 10:     var loc : string = safe;
                            ^^^^ taint. This type is incompatible with
 10:     var loc : string = safe;
                   ^^^^^^ string

taint4.js:12
 12:   var y : any = x;
                     ^ taint. This type is incompatible with
 12:   var y : any = x;
               ^^^ any

use-types.js:7
  7:   var should_fail : number = x * 42;
                                  ^ taint. The operand of an arithmetic operation must be a number.

use-types.js:11
 11:   var ok : number = x.f;
                         ^^^ taint. This type is incompatible with
 11:   var ok : number = x.f;
                ^^^^^^ number

use-types.js:15
 15:   return o.f(t);
                  ^ taint. This type is incompatible with the expected param type of
 14: function foo2 (o : {f (y:number):number}, t: $Tainted<number>) {
                              ^^^^^^ number

use-types.js:23
 23:   var trusted : string = a[0];
                              ^^^^ taint. This type is incompatible with
 23:   var trusted : string = a[0];
                     ^^^^^^ string

use-types.js:27
 27:   var trusted_number : number = a[0];
                                     ^^^^ string. This type is incompatible with
 27:   var trusted_number : number = a[0];
                            ^^^^^^ number

use-types.js:27
 27:   var trusted_number : number = a[0];
                                     ^^^^ taint. This type is incompatible with
 27:   var trusted_number : number = a[0];
                            ^^^^^^ number


Found 30 errors
